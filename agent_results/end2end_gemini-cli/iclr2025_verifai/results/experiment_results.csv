task_id,method,iteration,passed,code
HumanEval/0,Zero-Shot,0,False,"def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(len(numbers) - 1):
        if numbers[i + 1] - numbers[i] < threshold:
            return True
    return False"
HumanEval/0,UT-Repair,1,True,"def has_close_elements(numbers, threshold):
    numbers.sort()
    for i in range(len(numbers) - 1):
        if numbers[i + 1] - numbers[i] < threshold:
            return True
    return False"
HumanEval/0,SMT-Repair,3,False,"def has_close_elements(numbers: List[float], threshold: float) -> bool:
    if len(numbers) < 2:
        return False
    numbers.sort()
    for i in range(len(numbers) - 1):
        if numbers[i + 1] - numbers[i] < threshold:
            return True
    return False"
HumanEval/2,Zero-Shot,0,True,"def truncate_number(number: float) -> float:
    return number - int(number)"
HumanEval/2,UT-Repair,0,True,"def truncate_number(number: float) -> float:
    return number - int(number)"
HumanEval/2,SMT-Repair,0,True,"def truncate_number(number: float) -> float:
    return number - int(number)"
HumanEval/3,Zero-Shot,0,False,"def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False"
HumanEval/3,UT-Repair,1,True,"def below_zero(operations) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False"
HumanEval/3,SMT-Repair,3,False,"def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False"
