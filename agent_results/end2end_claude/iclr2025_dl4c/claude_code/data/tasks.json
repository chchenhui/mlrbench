{
  "tasks": [
    {
      "id": "task1",
      "name": "String Manipulation Library",
      "complexity": "simple",
      "description": "Implement a string manipulation library with functions for common operations.",
      "requirements": [
        "Implement a function to reverse a string",
        "Implement a function to check if a string is a palindrome",
        "Implement a function to count occurrences of a substring",
        "Implement a function to capitalize the first letter of each word",
        "Provide proper documentation for each function"
      ],
      "expected_output": {
        "reverse_string": "Function that takes a string and returns it reversed",
        "is_palindrome": "Function that returns True if the string reads the same forward and backward",
        "count_substring": "Function that counts occurrences of a substring in a string",
        "capitalize_words": "Function that capitalizes the first letter of each word in a string"
      },
      "test_cases": [
        {
          "function": "reverse_string",
          "input": "hello",
          "expected": "olleh"
        },
        {
          "function": "is_palindrome",
          "input": "racecar",
          "expected": true
        },
        {
          "function": "is_palindrome",
          "input": "hello",
          "expected": false
        },
        {
          "function": "count_substring",
          "input": ["hello hello world", "hello"],
          "expected": 2
        },
        {
          "function": "capitalize_words",
          "input": "hello world",
          "expected": "Hello World"
        }
      ]
    },
    {
      "id": "task2",
      "name": "Data Structure Implementation",
      "complexity": "moderate",
      "description": "Implement a priority queue data structure with required operations.",
      "requirements": [
        "Implement a PriorityQueue class",
        "Support enqueue operation with priority",
        "Support dequeue operation that removes highest priority item",
        "Support peek operation that returns highest priority without removal",
        "Include methods to check if queue is empty and get queue size",
        "Ensure efficient implementation with appropriate internal data structure"
      ],
      "expected_output": {
        "PriorityQueue": "A class implementing a priority queue with the required operations"
      },
      "test_cases": [
        {
          "operations": [
            ["enqueue", "Task A", 3],
            ["enqueue", "Task B", 1],
            ["enqueue", "Task C", 2],
            ["peek"],
            ["dequeue"],
            ["dequeue"],
            ["size"]
          ],
          "expected": [
            null,
            null,
            null,
            "Task B",
            "Task B",
            "Task C",
            1
          ]
        }
      ]
    },
    {
      "id": "task3",
      "name": "API Client Library",
      "complexity": "moderate",
      "description": "Implement a client library for interacting with a RESTful API service.",
      "requirements": [
        "Create a structured API client class",
        "Implement methods for GET, POST, PUT and DELETE requests",
        "Include error handling and response validation",
        "Implement timeout and retry logic",
        "Support authentication (API key or OAuth)",
        "Include proper logging of requests and responses"
      ],
      "expected_output": {
        "APIClient": "A class that provides methods to interact with a RESTful API"
      },
      "test_cases": [
        {
          "note": "This task will be evaluated based on code quality, structure, and adherence to requirements rather than specific functional tests"
        }
      ]
    },
    {
      "id": "task4",
      "name": "Event Management System",
      "complexity": "complex",
      "description": "Design and implement a simple event management system with event scheduling, notification, and subscriber management.",
      "requirements": [
        "Create an event management system with publisher-subscriber pattern",
        "Implement an Event class with properties (name, timestamp, data)",
        "Implement a Subscriber interface for objects that can receive events",
        "Create an EventManager to handle registration, deregistration of subscribers",
        "Support event filtering based on event types or properties",
        "Implement asynchronous event notification",
        "Include logging and error handling mechanisms"
      ],
      "expected_output": {
        "EventManager": "Class that manages the event system",
        "Event": "Class representing events",
        "Subscriber": "Interface for subscribers",
        "Publishers": "Components that can publish events"
      },
      "test_cases": [
        {
          "note": "This task will be evaluated based on system design, component interaction, and adherence to requirements"
        }
      ]
    },
    {
      "id": "task5",
      "name": "Mini Web Framework",
      "complexity": "complex",
      "description": "Implement a minimalist web application framework with routing, middleware support, and request/response handling.",
      "requirements": [
        "Create a framework for handling HTTP requests and responses",
        "Implement a Router with support for different HTTP methods (GET, POST, etc.)",
        "Support route parameters (e.g., /users/:id)",
        "Implement middleware support for request processing pipeline",
        "Include error handling middleware",
        "Support for serving static files",
        "Include a simple template rendering system"
      ],
      "expected_output": {
        "Framework": "A small, functional web framework",
        "Router": "Component for handling routes",
        "Middleware": "Support for request processing middleware",
        "StaticFileServer": "Component for serving static files",
        "TemplateEngine": "Simple template rendering system"
      },
      "test_cases": [
        {
          "note": "This task will be evaluated based on architecture design, component interaction, and adherence to requirements"
        }
      ]
    }
  ]
}